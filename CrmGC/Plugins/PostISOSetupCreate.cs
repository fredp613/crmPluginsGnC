// <copyright file="PreFundCentreCreate.cs" company="Department of Justice/ministaire de la Justice">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Department of Justice/ministaire de la Justice</author>
// <date>10/26/2015 4:44:37 PM</date>
// <summary>Implements the PreFundCentreCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace CrmGC.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Client;
    using Microsoft.Xrm.Sdk.Query;
    using Microsoft.Xrm.Sdk.Discovery;
    using Microsoft.Xrm.Sdk.Messages;
    using System.Collections.Generic;
    using System.Linq;

    public class PostISOSetupCreate : IPlugin
    {
        /// <summary>
        /// A plug-in that creates a follow-up task activity when a new account is created.
        /// </summary>
        /// <remarks>Register this plug-in on the Create message, account entity,
        /// and asynchronous mode.
        /// </remarks>
        public void Execute(IServiceProvider serviceProvider)
        {
            //Extract the tracing service for use in debugging sandboxed plug-ins.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));
            IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            var service = serviceFactory.CreateOrganizationService(context.UserId);
            OrganizationServiceContext ctx = new OrganizationServiceContext(service);
            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {

                // Obtain the target entity from the input parameters.
                Entity entity = (Entity)context.InputParameters["Target"];

                if (entity.LogicalName != "gcbase_isosetup")
                    return;

                FaultException ex1 = new FaultException();
               //throw new InvalidPluginExecutionException("test", ex1);

                if (entity.Attributes.Contains("statuscode"))
                {
                    try
                    {

                        QueryExpression countries = new QueryExpression
                        {
                            EntityName = "gcbase_isocountry",
                            ColumnSet = new ColumnSet("gcbase_name", "gcbase_iso316612lettercode"),                                                      
                        };


                        QueryExpression subDivisions = new QueryExpression
                        {
                            EntityName = "gcbase_isosubdivision",
                            ColumnSet = new ColumnSet("gcbase_name", "gcbase_countrycode"),                         
                        };

                        DataCollection<Entity> allCountries = service.RetrieveMultiple(countries).Entities;
                        DataCollection<Entity> allSubDivisions = service.RetrieveMultiple(subDivisions).Entities;
                        foreach (Entity sd in allSubDivisions) {
                            var countryCode = sd.GetAttributeValue<string>("gcbase_countrycode").ToString();
                            tracingService.Trace("ios plugin: {0}", countryCode);
                            QueryExpression countryRef = new QueryExpression
                            {
                                EntityName = "gcbase_isocountry",
                                ColumnSet = new ColumnSet("gcbase_name", "gcbase_iso316612lettercode"),
                                Criteria = new FilterExpression
                                {
                                    Conditions = {
                                        new ConditionExpression {
                                        AttributeName = "gcbase_iso316612lettercode",
                                        Operator = ConditionOperator.Equal,
                                        Values = { countryCode }                                        
                                        }
                                    }
                                }
                            };
                            EntityCollection countryData = service.RetrieveMultiple(countryRef);
                            if (countryData.Entities.Count() > 0)
                            {
                                Entity country = (Entity)countryData.Entities.FirstOrDefault();
                                EntityReference isoCountry = new EntityReference("gcbase_isocountry", country.Id);
                                sd["gcbase_isocountry"] = isoCountry;
                                ctx.Attach(sd);
                                ctx.UpdateObject(sd);
                                ctx.SaveChanges();
                            }
                           
                            
                           
                        };


                    }

                    catch (FaultException<OrganizationServiceFault> ex)
                    {
                        throw new InvalidPluginExecutionException("An error occurred in the IOS Setup plug-in.", ex);
                    }

                    catch (Exception ex)
                    {
                        tracingService.Trace("FollowupPlugin: {0}", ex.ToString());
                        throw;
                    }

                }

            }
        }
    }
}
