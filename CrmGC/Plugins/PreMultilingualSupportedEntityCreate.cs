// <copyright file="PreMultilingualSupportedEntityCreate.cs" company="Department of Justice/ministaire de la Justice">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author>Department of Justice/ministaire de la Justice</author>
// <date>3/18/2016 3:06:16 PM</date>
// <summary>Implements the PreMultilingualSupportedEntityCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace CrmGC.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using EgcsCommon;


    /// <summary>
    /// PreMultilingualSupportedEntityCreate Plugin.
    /// </summary>    
    /// 
    public class MultiLingualPluginCreate : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            //Extract the tracing service for use in debugging sandboxed plug-ins.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            FaultException ex1 = new FaultException();
            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {
                throw new InvalidPluginExecutionException("hi we are good", ex1);
            }
        }
    }
    public class MultiLingualPluginUpdate : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            //Extract the tracing service for use in debugging sandboxed plug-ins.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            FaultException ex1 = new FaultException();
            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {
                throw new InvalidPluginExecutionException("hi we are good update", ex1);
            }
        }
    }
  
    public class MultiLingualPluginRetrieve : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            //Extract the tracing service for use in debugging sandboxed plug-ins.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            FaultException ex1 = new FaultException();
            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            try
            {  
                IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);
                Entity target = (Entity)context.OutputParameters["BusinessEntity"];
                if (new UserLocaleHelper(service, context).getUserLanguage() == 1033) {
                    if (target.Attributes.Contains("address1_line1"))
                    {
                        target["name"] = target.GetAttributeValue<string>("address1_line1");
                    }
                    else
                    {
                        target["name"] = "testing";
                    }
                } else {
                    target["name"] = "French";
                }
                
            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                throw new InvalidPluginExecutionException("An error occurred in the multi lingual plug-in.", ex);
            }

        }
    }
    public class MultiLingualPluginRetrieveMultiple : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            //Extract the tracing service for use in debugging sandboxed plug-ins.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            FaultException ex1 = new FaultException();
            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));
            try
            {
                IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);
                EntityCollection targets = (EntityCollection)context.OutputParameters["BusinessEntityCollection"];
                
                var lang = new UserLocaleHelper(service, context).getUserLanguage();
                foreach (Entity e in targets.Entities)
                {                 
                    //query the entity get columns
                    Entity record = service.Retrieve(e.LogicalName, e.Id, new ColumnSet("address1_line1"));
                    if (lang == 1033)
                    {
                        if (record.Attributes.Contains("address1_line1"))
                        {
                            e["name"] = record.GetAttributeValue<string>("address1_line1");
                        }                       
                    }
                    else
                    {
                        e["name"] = "French";
                    }
                }
                

            }
            catch (FaultException<OrganizationServiceFault> ex)
            {
                throw new InvalidPluginExecutionException("An error occurred in the multi lingual plug-in.", ex);
            }

        }
    }

    public class UserLocaleHelper {
        int userLanguageId = 0;
        IOrganizationService _service;
        IPluginExecutionContext _context;

        public UserLocaleHelper(IOrganizationService param_service, IPluginExecutionContext param_context)
        {
            _service = param_service;
            _context = param_context;

        }
        public int getUserLanguage()
        {
            if (_context.SharedVariables.ContainsKey("UserLocaleId"))
            {
                userLanguageId = (int)_context.SharedVariables["UserLocaleId"];
            }
            else
            {
                Entity userLanguage = _service.Retrieve("usersettings", _context.InitiatingUserId, new ColumnSet("uilanguageid"));
                userLanguageId = userLanguage.GetAttributeValue<int>("uilanguageid");
            }
            return userLanguageId;
        }
    }
    public class PreMultilingualSupportedEntityCreate: IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        { 
             //Extract the tracing service for use in debugging sandboxed plug-ins.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            FaultException ex1 = new FaultException();
            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {

                // Obtain the target entity from the input parameters.
                Entity entity = (Entity)context.InputParameters["Target"];
                if (entity.Attributes.Contains("egcs_name")) 
                {

                    try
                    {
                        //// Obtain the organization service reference.
                        IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                        IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

                        //before creating any of these, check if they already exist. If yes, do nothing or throw an error to user like already is configured.
                        var entityName = entity.GetAttributeValue<string>("egcs_name");

                        var newPluginCreate = new PluginGenerator(service, entityName, "CrmGC.Plugins.MultiLingualPluginCreate", (int)CrmPluginStepStage.PostOperation, "create step for multilingual plugin for entity: " + entityName, SdkMessageName.Create.ToString(), "creating", "update name field on create").generatePlugin();
                        var newPluginUpdate = new PluginGenerator(service, entityName, "CrmGC.Plugins.MultiLingualPluginUpdate", (int)CrmPluginStepStage.PostOperation, "update step for multilingual plugin for entity: " + entityName, SdkMessageName.Update.ToString(), "updating", "update name field on update").generatePlugin();
                        var newPluginRetrieve = new PluginGenerator(service, entityName, "CrmGC.Plugins.MultiLingualPluginRetrieve", (int)CrmPluginStepStage.PostOperation, "retrieve step for multilingual plugin for entity: " + entityName, SdkMessageName.Retrieve.ToString(), "Retrieving", "Retrieve based on localization").generatePlugin();
                        var newPluginRetrieveMultiple = new PluginGenerator(service, entityName, "CrmGC.Plugins.MultiLingualPluginRetrieveMultiple", (int)CrmPluginStepStage.PostOperation, "retrieve multiple step for multilingual plugin for entity: " + entityName, SdkMessageName.RetrieveMultiple.ToString(), "Retrieving All", "Retrieve based on localization").generatePlugin();

                        //update the plugin guids add to pluginid field. Use this plugin id when deleting to remove the step

                    }
                    catch (FaultException<OrganizationServiceFault> ex)
                    {
                        throw new InvalidPluginExecutionException("An error occurred in the FollowupPlugin plug-in.", ex);
                    }

                    catch (Exception ex)
                    {
                        tracingService.Trace("FollowupPlugin: {0}", ex.ToString());
                        throw;
                    }

                    
                }
            }
        
        }
        
    }
}
