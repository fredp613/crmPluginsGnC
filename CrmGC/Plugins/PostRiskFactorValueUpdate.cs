// <copyright file="PostRiskFactorValueUpdate.cs" company="Department of Justice/ministaire de la Justice">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author>Department of Justice/ministaire de la Justice</author>
// <date>2/17/2016 4:00:41 PM</date>
// <summary>Implements the PostRiskFactorValueUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace CrmGC.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Client;
    using Microsoft.Xrm.Sdk.Query;
    using Microsoft.Xrm.Sdk.Discovery;
    using Microsoft.Xrm.Sdk.Messages;
    using System.Collections.Generic;
    using System.Linq;
    using EgcsCommon;

    /// <summary>
    /// PostRiskFactorValueUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PostRiskFactorValueUpdate: IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            //Extract the tracing service for use in debugging sandboxed plug-ins.
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {

                // Obtain the target entity from the input parameters.
                Entity entity = (Entity)context.InputParameters["Target"];

                if (entity.LogicalName != "gcbase_riskfactorvalue")
                    return;

                FaultException ex1 = new FaultException();
                //  throw new InvalidPluginExecutionException("test", ex1);

                try
                {
                    //// Obtain the organization service reference.
                    IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                    IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);
                   
                    if (entity.Attributes.Contains("gcbase_risklevel"))
                    {

                        var riskfactorValue = service.Retrieve("gcbase_riskfactorvalue", entity.Id, new ColumnSet("gcbase_fundingcaseriskassessment", "statuscode"));
                       
                       // int indexOfStatus = optHelper.getIndexOfLabel("gcbase_riskfactorvalue", "statuscode", "Completed", service);
                      //  throw new InvalidPluginExecutionException(optHelper.getLabelFromField(entity, "statuscode", service), ex1);

                        if (!new RiskTemplate(null, service).generateTotalWeightedRiskScoreForRiskAssessment(riskfactorValue))
                        {
                            throw new InvalidPluginExecutionException("something went wrong contact sys admin re. postriskfactorvalue plugin", ex1);
                        }

                       // var riskTemplateRef = postEntity.GetAttributeValue<EntityReference>("gcbase_risktemplate");
                        //first check if there are any completed risk asssessments using this template, if yes the user will not have the ability 
                        //change the weights etc, they will need to create a new template - only thing they should be allowed to edit is the rick factor titles maybe
                        //if (!new Common_Modules.RiskTemplateHelper(riskTemplateRef, service).templateHasExistingCompletedAssessments())
                        //{
                        //    // throw new InvalidPluginExecutionException("asfsdafasd", ex1);
                        //    if (!new Common_Modules.RiskTemplateHelper(riskTemplateRef, service).generateTotalWeightedRiskScore())
                        //    {
                        //        throw new InvalidPluginExecutionException("something went wrong contact system admin-postrisktemplateriskfactorupdate plugin", ex1);
                        //    };
                        //}
                        //else
                        //{
                        //    throw new InvalidPluginExecutionException("You cannot modify the weight of a risk element that already has been used in a completed assessment", ex1);
                        //}

                    }
                }
                catch (FaultException<OrganizationServiceFault> ex)
                {
                    throw new InvalidPluginExecutionException("An error occurred in the FollowupPlugin plug-in.", ex);
                }

                catch (Exception ex)
                {
                    tracingService.Trace("FollowupPlugin: {0}", ex.ToString());
                    throw;
                }
            }
        }
    }
}
